**** 2018.08.21 ****
Это 1-й "предметный" конспект (файл), который я сохраняю на Гитхаб;
Пред."предметный" файл
[1] - of2-osvita17-180816(book);

Здесь намереваюсь записать "правильное" создание новой записи в БД,
поскольку у меня идет не 'create', 'update'

*/- 1

ss@office:~/rails_projects/osvita$ git branch
  book
* master
  part

ss@office:~/rails_projects/osvita$ git status
On branch master
Your branch is ahead of 'origin/master' by 3 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

ss@office:~/rails_projects/osvita$ git co -b new
Switched to a new branch 'new'
ss@office:~/rails_projects/osvita$ 

*/- 2.1
Мне казалось, 
что после генерации ресурса
def new "пустой",

т.е.имеет вид
  # GET /books/new
  def new
  end

а создание нового объекта происходит в def create как раз по "строгим параметрам":
  # POST /books
  # POST /books.json
  def create
    @book = Book.new(book_params)

    respond_to do |format|
      if @book.save
...
end

*/- 2.2
у себя же в /app/controllers/books_controller.rb
я обнаружил 
  # GET /books/new
  def new
    @book = Book.new
  end

(def create - как и указано выше);

*/- 2.3
... также я нашел в [1], п.13.4,
что такая "комбинация" def new и def create работает правильно!
(Я написал там "комбинация", поскольку много "комбинировал", в каком def (из них двоих) что писать, 
чтобы при 'new' на форме выскакивала кнопка 'Create',
и чтобы работали строгие параметры);

Но такая "комбинация" работает только в books_controller.rb;

В parts_controller.rb (и не только - потом укажу все)
мне удвлось создать "живое" (работающее) Приложение только путем 'update'.
А 'create' у меня не получилось.
Причина, ЯтД (теперь!!!!) в "строгих параметрах",
поскоьку ЭТИ модели имеют ассоциации.

См.также п. ... в [1], где я проводил исследования;

*/- 3.1
Открываю /app/controllers/parts_controller.rb
Там
  # GET /parts/new
  def new
    #@part = Part.new
#byebug   
    #@book = Book.find(@book_id)
    #@book = Book.find(2)
    @book = Book.find(params[:id])
    @part = @book.parts.create()
    #@part = @book.parts.build(part_params)
    @book_id = @part.book_id   
    
  end
  
и
  # POST /parts
  # POST /parts.json
  def create
    #@part = Part.new(part_params)
    #@part = @book.parts.build(part_params)
    
    respond_to do |format|
      if @part.save
        format.html { redirect_to @part, notice: 'Part was successfully created.' }
        format.json { render :show, status: :created, location: @part }
      else
        format.html { render :new }
        format.json { render json: @part.errors, status: :unprocessable_entity }
      end
    end
  end


